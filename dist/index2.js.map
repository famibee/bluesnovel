{"version":3,"file":"index2.js","sources":["../node_modules/@pixi/extensions/lib/index.mjs"],"sourcesContent":["var ExtensionType = /* @__PURE__ */ ((ExtensionType2) => (ExtensionType2.Renderer = \"renderer\", ExtensionType2.Application = \"application\", ExtensionType2.RendererSystem = \"renderer-webgl-system\", ExtensionType2.RendererPlugin = \"renderer-webgl-plugin\", ExtensionType2.CanvasRendererSystem = \"renderer-canvas-system\", ExtensionType2.CanvasRendererPlugin = \"renderer-canvas-plugin\", ExtensionType2.Asset = \"asset\", ExtensionType2.LoadParser = \"load-parser\", ExtensionType2.ResolveParser = \"resolve-parser\", ExtensionType2.CacheParser = \"cache-parser\", ExtensionType2.DetectionParser = \"detection-parser\", ExtensionType2))(ExtensionType || {});\nconst normalizeExtension = (ext) => {\n  if (typeof ext == \"function\" || typeof ext == \"object\" && ext.extension) {\n    if (!ext.extension)\n      throw new Error(\"Extension class must have an extension object\");\n    ext = { ...typeof ext.extension != \"object\" ? { type: ext.extension } : ext.extension, ref: ext };\n  }\n  if (typeof ext == \"object\")\n    ext = { ...ext };\n  else\n    throw new Error(\"Invalid extension type\");\n  return typeof ext.type == \"string\" && (ext.type = [ext.type]), ext;\n}, normalizePriority = (ext, defaultPriority) => normalizeExtension(ext).priority ?? defaultPriority, extensions = {\n  /** @ignore */\n  _addHandlers: {},\n  /** @ignore */\n  _removeHandlers: {},\n  /** @ignore */\n  _queue: {},\n  /**\n   * Remove extensions from PixiJS.\n   * @param extensions - Extensions to be removed.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  remove(...extensions2) {\n    return extensions2.map(normalizeExtension).forEach((ext) => {\n      ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n    }), this;\n  },\n  /**\n   * Register new extensions with PixiJS.\n   * @param extensions - The spread of extensions to add to PixiJS.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  add(...extensions2) {\n    return extensions2.map(normalizeExtension).forEach((ext) => {\n      ext.type.forEach((type) => {\n        const handlers = this._addHandlers, queue = this._queue;\n        handlers[type] ? handlers[type]?.(ext) : (queue[type] = queue[type] || [], queue[type]?.push(ext));\n      });\n    }), this;\n  },\n  /**\n   * Internal method to handle extensions by name.\n   * @param type - The extension type.\n   * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n   * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  handle(type, onAdd, onRemove) {\n    const addHandlers = this._addHandlers, removeHandlers = this._removeHandlers;\n    if (addHandlers[type] || removeHandlers[type])\n      throw new Error(`Extension type ${type} already has a handler`);\n    addHandlers[type] = onAdd, removeHandlers[type] = onRemove;\n    const queue = this._queue;\n    return queue[type] && (queue[type]?.forEach((ext) => onAdd(ext)), delete queue[type]), this;\n  },\n  /**\n   * Handle a type, but using a map by `name` property.\n   * @param type - Type of extension to handle.\n   * @param map - The object map of named extensions.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  handleByMap(type, map) {\n    return this.handle(\n      type,\n      (extension) => {\n        extension.name && (map[extension.name] = extension.ref);\n      },\n      (extension) => {\n        extension.name && delete map[extension.name];\n      }\n    );\n  },\n  /**\n   * Handle a type, but using a list of extensions.\n   * @param type - Type of extension to handle.\n   * @param list - The list of extensions.\n   * @param defaultPriority - The default priority to use if none is specified.\n   * @returns {PIXI.extensions} For chaining.\n   */\n  handleByList(type, list, defaultPriority = -1) {\n    return this.handle(\n      type,\n      (extension) => {\n        list.includes(extension.ref) || (list.push(extension.ref), list.sort((a, b) => normalizePriority(b, defaultPriority) - normalizePriority(a, defaultPriority)));\n      },\n      (extension) => {\n        const index = list.indexOf(extension.ref);\n        index !== -1 && list.splice(index, 1);\n      }\n    );\n  }\n};\nexport {\n  ExtensionType,\n  extensions\n};\n//# sourceMappingURL=index.mjs.map\n"],"names":["ExtensionType","ExtensionType2","normalizeExtension","ext","normalizePriority","defaultPriority","extensions","extensions2","type","handlers","queue","onAdd","onRemove","addHandlers","removeHandlers","map","extension","list","a","b","index"],"mappings":"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","x_google_ignoreList":[0]}